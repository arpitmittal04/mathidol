{"version":3,"sources":["jquery.inview.js"],"names":["$","getViewportSize","mode","domObject","size","height","w","innerHeight","width","innerWidth","d","compatMode","support","boxModel","documentElement","body","clientHeight","clientWidth","getViewportOffset","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","checkInView","elementsLength","$elements","i","each","inviewObjects","inviewObject","selector","data","$element","push","find","length","viewportSize","viewportOffset","contains","visiblePartX","visiblePartY","visiblePartsMerged","elementSize","elementOffset","offset","inView","trigger","timer","document","window","expando","event","special","inview","add","guid","this","isEmptyObject","setInterval","remove","e","clearInterval","bind","addEventListener","attachEvent","jQuery"],"mappings":"CAKA,SAAWA,GAkCT,QAASC,KACP,GAAIC,GAAMC,EAAWC,GAASC,OAAQC,EAAEC,YAAaC,MAAOF,EAAEG,WAiB9D,OAbKL,GAAKC,SACRH,EAAOQ,EAAEC,YACLT,IAASF,EAAEY,QAAQC,YACrBV,EAAqB,eAATD,EACVY,EACAJ,EAAEK,KACJX,GACEC,OAAQF,EAAUa,aAClBR,MAAQL,EAAUc,eAKjBb,EAGT,QAASc,KACP,OACEC,IAAMb,EAAEc,aAAeN,EAAgBO,WAAeX,EAAEK,KAAKM,UAC7DC,KAAMhB,EAAEiB,aAAeT,EAAgBU,YAAed,EAAEK,KAAKS,YAIjE,QAASC,KACP,GAAoBC,GAAhBC,KAAgCC,EAAI,CASxC,IAPA5B,EAAE6B,KAAKC,EAAe,SAASF,EAAGG,GAChC,GAAIC,GAAYD,EAAaE,KAAKD,SAC9BE,EAAYH,EAAaG,QAC7BP,GAAUQ,KAAKH,EAAWE,EAASE,KAAKJ,GAAYE,KAGtDR,EAAiBC,EAAUU,OAKzB,IAHAC,EAAiBA,GAAkBrC,IACnCsC,EAAiBA,GAAkBrB,IAE1BQ,EAAFE,EAAkBA,IAEvB,GAAK5B,EAAEwC,SAAS1B,EAAiBa,EAAUC,GAAG,IAA9C,CAIA,GAIIa,GACAC,EACAC,EANAT,EAAgBlC,EAAE2B,EAAUC,IAC5BgB,GAAkBvC,OAAQ6B,EAAS7B,SAAUG,MAAO0B,EAAS1B,SAC7DqC,EAAgBX,EAASY,SACzBC,EAAgBb,EAASD,KAAK,SAUlC,KAAKM,IAAmBD,EACtB,MAGEO,GAAc1B,IAAMyB,EAAYvC,OAASkC,EAAepB,KACxD0B,EAAc1B,IAAMoB,EAAepB,IAAMmB,EAAajC,QACtDwC,EAAcvB,KAAOsB,EAAYpC,MAAQ+B,EAAejB,MACxDuB,EAAcvB,KAAOiB,EAAejB,KAAOgB,EAAa9B,OAC1DiC,EAAgBF,EAAejB,KAAOuB,EAAcvB,KAClD,QAAWiB,EAAejB,KAAOgB,EAAa9B,MAAUqC,EAAcvB,KAAOsB,EAAYpC,MACzF,OAAS,OACXkC,EAAgBH,EAAepB,IAAM0B,EAAc1B,IACjD,SAAYoB,EAAepB,IAAMmB,EAAajC,OAAWwC,EAAc1B,IAAMyB,EAAYvC,OACzF,MAAQ,OACVsC,EAAqBF,EAAe,IAAMC,EACrCK,GAAUA,IAAWJ,GACxBT,EAASD,KAAK,SAAUU,GAAoBK,QAAQ,WAAW,EAAMP,EAAcC,KAE5EK,GACTb,EAASD,KAAK,UAAU,GAAOe,QAAQ,WAAW,KAjH1D,GAAwBV,GAAcC,EACkDU,EADpFnB,KACApB,EAAIwC,SAAU5C,EAAI6C,OAAQrC,EAAkBJ,EAAEI,gBAAiBsC,EAAUpD,EAAEoD,OAE/EpD,GAAEqD,MAAMC,QAAQC,QACdC,IAAK,SAASvB,GACZH,EAAcG,EAAKwB,KAAO,IAAMC,KAAKN,KAAcnB,KAAMA,EAAMC,SAAUlC,EAAE0D,OAYtET,GAAUjD,EAAE2D,cAAc7B,KAC5BmB,EAAQW,YAAYnC,EAAa,OAItCoC,OAAQ,SAAS5B,GACf,UAAaH,GAAcG,EAAKwB,KAAO,IAAMC,KAAKN,IAAa,MAAMU,IAGjE9D,EAAE2D,cAAc7B,KACjBiC,cAAcd,GACdA,EAAQ,QA2FfjD,EAAEM,GAAG0D,KAAK,2BAA4B,WACpC1B,EAAeC,EAAiB,QAI7BzB,EAAgBmD,kBAAoBnD,EAAgBoD,aACvDpD,EAAgBoD,YAAY,YAAa,WACvC3B,EAAiB,QAGpB4B","file":"jquery.inview.min.js","sourcesContent":["/**\r\n * author Christopher Blum\r\n *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/\r\n *    - forked from http://github.com/zuk/jquery.inview/\r\n */\r\n(function ($) {\r\n  var inviewObjects = {}, viewportSize, viewportOffset,\r\n      d = document, w = window, documentElement = d.documentElement, expando = $.expando, timer;\r\n\r\n  $.event.special.inview = {\r\n    add: function(data) {\r\n      inviewObjects[data.guid + \"-\" + this[expando]] = { data: data, $element: $(this) };\r\n\r\n      // Use setInterval in order to also make sure this captures elements within\r\n      // \"overflow:scroll\" elements or elements that appeared in the dom tree due to\r\n      // dom manipulation and reflow\r\n      // old: $(window).scroll(checkInView);\r\n      //\r\n      // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays\r\n      // intervals while the user scrolls. Therefore the inview event might fire a bit late there\r\n      //\r\n      // Don't waste cycles with an interval until we get at least one element that\r\n      // has bound to the inview event.\r\n      if (!timer && !$.isEmptyObject(inviewObjects)) {\r\n         timer = setInterval(checkInView, 250);\r\n      }\r\n    },\r\n\r\n    remove: function(data) {\r\n      try { delete inviewObjects[data.guid + \"-\" + this[expando]]; } catch(e) {}\r\n\r\n      // Clear interval when we no longer have any elements listening\r\n      if ($.isEmptyObject(inviewObjects)) {\r\n         clearInterval(timer);\r\n         timer = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  function getViewportSize() {\r\n    var mode, domObject, size = { height: w.innerHeight, width: w.innerWidth };\r\n\r\n    // if this is correct then return it. iPad has compat Mode, so will\r\n    // go into check clientHeight/clientWidth (which has the wrong value).\r\n    if (!size.height) {\r\n      mode = d.compatMode;\r\n      if (mode || !$.support.boxModel) { // IE, Gecko\r\n        domObject = mode === 'CSS1Compat' ?\r\n          documentElement : // Standards\r\n          d.body; // Quirks\r\n        size = {\r\n          height: domObject.clientHeight,\r\n          width:  domObject.clientWidth\r\n        };\r\n      }\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  function getViewportOffset() {\r\n    return {\r\n      top:  w.pageYOffset || documentElement.scrollTop   || d.body.scrollTop,\r\n      left: w.pageXOffset || documentElement.scrollLeft  || d.body.scrollLeft\r\n    };\r\n  }\r\n\r\n  function checkInView() {\r\n    var $elements = [], elementsLength, i = 0;\r\n\r\n    $.each(inviewObjects, function(i, inviewObject) {\r\n      var selector  = inviewObject.data.selector,\r\n          $element  = inviewObject.$element;\r\n      $elements.push(selector ? $element.find(selector) : $element);\r\n    });\r\n\r\n    elementsLength = $elements.length;\r\n    if (elementsLength) {\r\n      viewportSize   = viewportSize   || getViewportSize();\r\n      viewportOffset = viewportOffset || getViewportOffset();\r\n\r\n      for (; i<elementsLength; i++) {\r\n        // Ignore elements that are not in the DOM tree\r\n        if (!$.contains(documentElement, $elements[i][0])) {\r\n          continue;\r\n        }\r\n\r\n        var $element      = $($elements[i]),\r\n            elementSize   = { height: $element.height(), width: $element.width() },\r\n            elementOffset = $element.offset(),\r\n            inView        = $element.data('inview'),\r\n            visiblePartX,\r\n            visiblePartY,\r\n            visiblePartsMerged;\r\n\r\n        // Don't ask me why because I haven't figured out yet:\r\n        // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.\r\n        // Even though it sounds weird:\r\n        // It seems that the execution of this function is interferred by the onresize/onscroll event\r\n        // where viewportOffset and viewportSize are unset\r\n        if (!viewportOffset || !viewportSize) {\r\n          return;\r\n        }\r\n\r\n        if (elementOffset.top + elementSize.height > viewportOffset.top &&\r\n            elementOffset.top < viewportOffset.top + viewportSize.height &&\r\n            elementOffset.left + elementSize.width > viewportOffset.left &&\r\n            elementOffset.left < viewportOffset.left + viewportSize.width) {\r\n          visiblePartX = (viewportOffset.left > elementOffset.left ?\r\n            'right' : (viewportOffset.left + viewportSize.width) < (elementOffset.left + elementSize.width) ?\r\n            'left' : 'both');\r\n          visiblePartY = (viewportOffset.top > elementOffset.top ?\r\n            'bottom' : (viewportOffset.top + viewportSize.height) < (elementOffset.top + elementSize.height) ?\r\n            'top' : 'both');\r\n          visiblePartsMerged = visiblePartX + \"-\" + visiblePartY;\r\n          if (!inView || inView !== visiblePartsMerged) {\r\n            $element.data('inview', visiblePartsMerged).trigger('inview', [true, visiblePartX, visiblePartY]);\r\n          }\r\n        } else if (inView) {\r\n          $element.data('inview', false).trigger('inview', [false]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  $(w).bind(\"scroll resize scrollstop\", function() {\r\n    viewportSize = viewportOffset = null;\r\n  });\r\n\r\n  // IE < 9 scrolls to focused elements without firing the \"scroll\" event\r\n  if (!documentElement.addEventListener && documentElement.attachEvent) {\r\n    documentElement.attachEvent(\"onfocusin\", function() {\r\n      viewportOffset = null;\r\n    });\r\n  }\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}